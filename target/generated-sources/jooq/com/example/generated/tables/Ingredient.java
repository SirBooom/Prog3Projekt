/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables;


import com.example.generated.DefaultSchema;
import com.example.generated.Keys;
import com.example.generated.tables.Recipe.RecipePath;
import com.example.generated.tables.records.IngredientRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Ingredient extends TableImpl<IngredientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Ingredient</code>
     */
    public static final Ingredient INGREDIENT = new Ingredient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IngredientRecord> getRecordType() {
        return IngredientRecord.class;
    }

    /**
     * The column <code>Ingredient.ID</code>.
     */
    public final TableField<IngredientRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>Ingredient.NAME</code>.
     */
    public final TableField<IngredientRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Ingredient.RECIPE_ID</code>.
     */
    public final TableField<IngredientRecord, Integer> RECIPE_ID = createField(DSL.name("RECIPE_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Ingredient.price</code>.
     */
    public final TableField<IngredientRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Ingredient.nutrition</code>.
     */
    public final TableField<IngredientRecord, Integer> NUTRITION = createField(DSL.name("nutrition"), SQLDataType.INTEGER, this, "");

    private Ingredient(Name alias, Table<IngredientRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Ingredient(Name alias, Table<IngredientRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Ingredient</code> table reference
     */
    public Ingredient(String alias) {
        this(DSL.name(alias), INGREDIENT);
    }

    /**
     * Create an aliased <code>Ingredient</code> table reference
     */
    public Ingredient(Name alias) {
        this(alias, INGREDIENT);
    }

    /**
     * Create a <code>Ingredient</code> table reference
     */
    public Ingredient() {
        this(DSL.name("Ingredient"), null);
    }

    public <O extends Record> Ingredient(Table<O> path, ForeignKey<O, IngredientRecord> childPath, InverseForeignKey<O, IngredientRecord> parentPath) {
        super(path, childPath, parentPath, INGREDIENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class IngredientPath extends Ingredient implements Path<IngredientRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> IngredientPath(Table<O> path, ForeignKey<O, IngredientRecord> childPath, InverseForeignKey<O, IngredientRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private IngredientPath(Name alias, Table<IngredientRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public IngredientPath as(String alias) {
            return new IngredientPath(DSL.name(alias), this);
        }

        @Override
        public IngredientPath as(Name alias) {
            return new IngredientPath(alias, this);
        }

        @Override
        public IngredientPath as(Table<?> alias) {
            return new IngredientPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<IngredientRecord, Integer> getIdentity() {
        return (Identity<IngredientRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<ForeignKey<IngredientRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INGREDIENT__FK_INGREDIENT_PK_RECIPE);
    }

    private transient RecipePath _recipe;

    /**
     * Get the implicit join path to the <code>Recipe</code> table.
     */
    public RecipePath recipe() {
        if (_recipe == null)
            _recipe = new RecipePath(this, Keys.INGREDIENT__FK_INGREDIENT_PK_RECIPE, null);

        return _recipe;
    }

    @Override
    public Ingredient as(String alias) {
        return new Ingredient(DSL.name(alias), this);
    }

    @Override
    public Ingredient as(Name alias) {
        return new Ingredient(alias, this);
    }

    @Override
    public Ingredient as(Table<?> alias) {
        return new Ingredient(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredient rename(String name) {
        return new Ingredient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredient rename(Name name) {
        return new Ingredient(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredient rename(Table<?> name) {
        return new Ingredient(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ingredient where(Condition condition) {
        return new Ingredient(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ingredient where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ingredient where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ingredient where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ingredient where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ingredient where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ingredient where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ingredient where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ingredient whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ingredient whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
